#!/bin/bash
# sync-env.sh
# Script to synchronize environment variables between root and mobile app

# Print colored output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Synchronizing environment variables ===${NC}"

# Navigate to root directory
cd "$(dirname "$0")/.." || exit

# Check if root .env exists
if [ ! -f ".env" ]; then
  echo -e "${YELLOW}Root .env file not found. Please run setup-supabase.sh first.${NC}"
  exit 1
fi

# Create/update mobile app .env with only EXPO_PUBLIC_ variables
echo -e "${YELLOW}Updating mobile app .env file...${NC}"
mkdir -p apps/mobile
grep "EXPO_PUBLIC_" .env > apps/mobile/.env.tmp
if [ -s apps/mobile/.env.tmp ]; then
  # Add header comment
  echo "# Generated by sync-env.sh" > apps/mobile/.env
  echo "# Mobile app environment variables - only public variables exposed to client" >> apps/mobile/.env
  cat apps/mobile/.env.tmp >> apps/mobile/.env
  rm apps/mobile/.env.tmp
  echo -e "${GREEN}Successfully updated apps/mobile/.env${NC}"
else
  echo -e "${YELLOW}No EXPO_PUBLIC_ variables found in root .env file${NC}"
  rm apps/mobile/.env.tmp
  exit 1
fi

# Clean up any environment-specific files that might cause confusion
echo -e "${YELLOW}Cleaning up environment-specific files...${NC}"

# Files to clean up
files_to_remove=(
  ".env.development"
  ".env.staging"
  ".env.production"
  "apps/mobile/.env.development"
  "apps/mobile/.env.staging"
  "apps/mobile/.env.production"
)

for file in "${files_to_remove[@]}"; do
  if [ -f "$file" ]; then
    echo -e "${YELLOW}Removing $file${NC}"
    rm "$file"
  fi
done

echo -e "${GREEN}=== Environment synchronization complete! ===${NC}"
echo -e "${BLUE}Local development now uses:${NC}"
echo -e "${BLUE}- Root level: .env${NC}"
echo -e "${BLUE}- Mobile app: apps/mobile/.env${NC}"